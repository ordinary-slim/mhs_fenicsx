Timer unit: 1e-09 s

Total time: 261.337 s
File: /root/shared/cases/3d_lpbf/main.py
Function: main at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                           def main():
    19         1 4636290136.0    5e+09      1.8      domain = get_mesh()
    20         1        3e+10    3e+10      9.7      p = Problem(domain, params, name="case")
    21         1        6e+10    6e+10     22.9      driver = SingleProblemDriver(p,params)
    22        21     453992.0  21618.7      0.0      while (driver.p.time < driver.p.source.path.times[-1] - 1e-7) and (driver.p.iter<max_iter):
    23        20        5e+10    2e+09     18.0          driver.pre_iterate()
    24        20        8e+10    4e+09     29.7          driver.iterate()
    25        20     216771.0  10838.5      0.0          driver.post_iterate()
    26        20        5e+10    2e+09     17.9          p.writepos()

Total time: 59.7707 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: __init__ at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                               def __init__(self,p:Problem,params:dict):
    13         1       1538.0   1538.0      0.0          self.p = p
    14                                                   # PRINT SETTINGS
    15         1       1763.0   1763.0      0.0          self.print_type = params["print"]["type"]
    16         1        937.0    937.0      0.0          self.hatch_width = params["print"]["width"]
    17         1       1219.0   1219.0      0.0          self.hatch_height = params["print"]["height"]
    18         1       1074.0   1074.0      0.0          self.hatch_depth = params["print"]["depth"]
    19         1       2029.0   2029.0      0.0          self.printing_dt = params["dt"]
    20         1       1159.0   1159.0      0.0          if "cooling_dt" in params:
    21         1       1022.0   1022.0      0.0              self.cooling_dt  = params["cooling_dt"]
    22                                                   else:
    23                                                       self.cooling_dt  = self.printing_dt
    24         1        925.0    925.0      0.0          self.dt = self.printing_dt
    25         1     733502.0 733502.0      0.0          self.p.set_initial_condition(params["environment_temperature"])
    26         1       5337.0   5337.0      0.0          if not(self.print_type.startswith("OFF")):
    27         1        6e+10    6e+10     96.0              self.deactivate_below_surface()
    28         1   11707851.0    1e+07      0.0          self.p.set_forms_domain()
    29         1 2283474868.0    2e+09      3.8          self.p.set_forms_boundary()
    30         1  124075243.0    1e+08      0.2          p.compile_forms()

Total time: 0.00256821 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: set_dt at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                               def set_dt(self):
    33        20      39112.0   1955.6      1.5          if self.p.source.path is not None:
    34        20     709628.0  35481.4     27.6              self.next_track = self.p.source.path.get_track(self.p.time)
    35        20      23955.0   1197.8      0.9              max_dt = self.next_track.t1 - self.p.time
    36        20     147231.0   7361.6      5.7              if self.next_track.type is TrackType.PRINTING:
    37        16      15435.0    964.7      0.6                  dt = self.printing_dt
    38                                                       else:
    39         4       3715.0    928.8      0.1                  dt = self.cooling_dt
    40        20      14363.0    718.1      0.6              if max_dt > 1e-7:
    41        20     117651.0   5882.6      4.6                  self.dt = min(dt,max_dt)
    42        20    1497118.0  74855.9     58.3              self.p.dt.value = self.dt

Total time: 39.3282 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: on_new_track_operations at line 44

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    44                                               def on_new_track_operations(self):
    45         4       3808.0    952.0      0.0          if self.p.source.path is not None:
    46         4       8853.0   2213.2      0.0              if self.next_track.type is TrackType.RECOATING:
    47         1        4e+10    4e+10    100.0                  self.deposit_new_layer()

Total time: 47.0797 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: pre_iterate at line 49

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    49                                               def pre_iterate(self):
    50        20    2818358.0 140917.9      0.0          self.set_dt()
    51        20      32673.0   1633.7      0.0          if self.p.source.path is not None:
    52        20      21951.0   1097.5      0.0              if self.p.source.path.is_new_track:
    53         4        4e+10    1e+10     83.5                  self.on_new_track_operations()
    54        20      39044.0   1952.2      0.0              if self.next_track.type is TrackType.PRINTING:
    55        16 4495121944.0    3e+08      9.5                  self.hatch_to_metal()
    56        20 3253414361.0    2e+08      6.9          self.p.pre_iterate()

Total time: 4.49488 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: hatch_to_metal at line 58

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    58                                               def hatch_to_metal(self):
    59                                                   #TODO: Define hatch
    60        16      20994.0   1312.1      0.0          x0 = self.p.source.x
    61        16    1799609.0 112475.6      0.0          x1 = self.p.source.x + self.next_track.get_speed()*self.dt
    62        32    6163214.0 192600.4      0.1          obb = OBB(x0,x1,self.hatch_width,self.hatch_height,
    63        16      16206.0   1012.9      0.0                    self.hatch_depth,self.p.dim)
    64        16 4485354248.0    3e+08     99.8          new_metal_els = mesh_collision(self.p.domain,obb.get_dolfinx_mesh())
    65        16    1526868.0  95429.2      0.0          self.p.update_material_funcs(new_metal_els,0)

Total time: 77.6347 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: iterate at line 67

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    67                                               def iterate(self):
    68        20        6e+10    3e+09     83.0          self.p.assemble()
    69        20        1e+10    7e+08     17.0          self.p.solve()

Total time: 8.003e-05 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: post_iterate at line 71

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    71                                               def post_iterate(self):
    72        20      80030.0   4001.5    100.0          self.p.post_iterate()

Total time: 57.3494 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: deactivate_below_surface at line 74

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    74                                               def deactivate_below_surface(self):
    75         1   28509115.0    3e+07      0.0          active_els = fem.locate_dofs_geometrical(self.p.dg0_bg, lambda x : x[self.p.domain.topology.dim-1] < 0.0 )
    76         1        4e+10    4e+10     73.1          self.p.set_activation(active_els)
    77         1       3088.0   3088.0      0.0          if self.print_type=="LPBF":
    78         1       3187.0   3187.0      0.0              assert len(self.p.materials)>1, "At least 2 materials for LPBF simulation."
    79         1        2e+10    2e+10     26.8              powder_els = [el for el in  np.arange(self.p.num_cells) if el not in active_els]
    80         1   28398576.0    3e+07      0.0              self.p.update_material_funcs(powder_els,1)

Total time: 39.3281 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/drivers/single_problem_driver.py
Function: deposit_new_layer at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                               def deposit_new_layer(self):
    84         1       8749.0   8749.0      0.0          dim = self.p.domain.topology.dim
    85         1    1072617.0    1e+06      0.0          inactive_els_indices = self.p.active_els_tag.find(0)
    86         3   17404519.0    6e+06      0.0          height_midpoints_inactive = mesh.compute_midpoints(self.p.domain,
    87         1        573.0    573.0      0.0                                                             dim,
    88         2      12051.0   6025.5      0.0                                                             inactive_els_indices)[:,dim-1]
    89         1      10145.0  10145.0      0.0          activation_height = self.next_track.p1[dim-1] + self.hatch_height
    90         1     520982.0 520982.0      0.0          els_to_activate = inactive_els_indices[np.flatnonzero(height_midpoints_inactive<activation_height)]
    91         1        4e+10    4e+10     93.8          self.p.set_activation(np.concatenate((self.p.active_els_tag.find(1), els_to_activate)))
    92         1     923496.0 923496.0      0.0          self.p.u.x.array[self.p.just_activated_nodes] = self.p.T_dep
    93         1     791579.0 791579.0      0.0          self.p.u_prev.x.array[self.p.just_activated_nodes] = self.p.T_dep
    94                                                   # TODO: Move this
    95         1   11234268.0    1e+07      0.0          self.p.set_forms_domain()
    96         1 2313691859.0    2e+09      5.9          self.p.set_forms_boundary()
    97         1   87362603.0    9e+07      0.2          self.p.compile_forms()

Total time: 0.000861904 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: __init__ at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                               def __init__(self, p0:np.ndarray, p1:np.ndarray,
    13                                                                  t0:float,t1:float,
    14                                                                  track_type:TrackType,
    15                                                                  speed:np.ndarray,power:float,
    16                                                                  index=-1,
    17                                                                  ):
    18        39      33686.0    863.7      3.9          self.p0 = p0
    19        39      16923.0    433.9      2.0          self.p1 = p1
    20        39      14055.0    360.4      1.6          self.t0 = t0
    21        39      13630.0    349.5      1.6          self.t1 = t1
    22        39      15539.0    398.4      1.8          self.type = track_type
    23        39      14874.0    381.4      1.7          self.speed = speed
    24        39      14009.0    359.2      1.6          self.power = power
    25        39      13125.0    336.5      1.5          self.index = index
    26        39     726063.0  18617.0     84.2          self.length = np.linalg.norm(p1-p0)

Total time: 0.00415317 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: get_speed at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                               def get_speed(self):
    28        36     371729.0  10325.8      9.0          step = (self.p1-self.p0)
    29        36    3781443.0 105040.1     91.0          return self.speed*step/np.linalg.norm(step)

Total time: 0.000418261 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: get_position at line 30

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    30                                               def get_position(self,time):
    31        20      21033.0   1051.7      5.0          if (time < self.t0 or time > self.t1):
    32                                                       raise Exception( "Time is out of bounds for this track.")
    33        20     397228.0  19861.4     95.0          return self.p0 + (time-self.t0)/(self.t1-self.t0)*(self.p1-self.p0)

Total time: 0.0117065 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: __repr__ at line 35

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    35                                               def __repr__(self):
    36        20   11706480.0 585324.0    100.0          return f"Track #{self.index} is a {self.type} track from {self.p0}, t={self.t0} to {self.p1},t={self.t1}.\n"

Total time: 4.4727e-05 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: __init__ at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                               def __init__(self,tracks:list[Track]):
    40         1       1455.0   1455.0      3.3          self.tracks = tracks
    41         1       5852.0   5852.0     13.1          self.times = np.empty(len(tracks)+1)
    42        40      12608.0    315.2     28.2          for idx in range(len(tracks)):
    43        39      22427.0    575.1     50.1              self.times[idx] = tracks[idx].t0
    44         1        804.0    804.0      1.8          self.times[-1] = tracks[-1].t1
    45         1        823.0    823.0      1.8          self.current_track = tracks[0]
    46         1        758.0    758.0      1.7          self.is_new_track = True

Total time: 0.000502831 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: update at line 47

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    47                                               def update(self,time):
    48        20     438940.0  21947.0     87.3          self.current_track = self.get_track(time)
    49        20      53123.0   2656.2     10.6          if abs(self.current_track.t0 - time) < 1e-7:
    50         3       1648.0    549.3      0.3              self.is_new_track  = True
    51                                                   else:
    52        17       9120.0    536.5      1.8              self.is_new_track  = False

Total time: 0.000661235 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: get_track at line 54

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    54                                               def get_track(self,t:float):
    55        40     159460.0   3986.5     24.1          assert (t >= self.tracks[0].t0 and t <= self.tracks[-1].t1), "Time is out of bounds for this path."
    56        40      19693.0    492.3      3.0          idx_track = 0
    57       108     242002.0   2240.8     36.6          for idx, track in enumerate(self.tracks):
    58       108     146089.0   1352.7     22.1              if t < track.t1 - 1e-7:
    59        40      22243.0    556.1      3.4                  idx_track = idx
    60        40      50801.0   1270.0      7.7                  break
    61        40      20947.0    523.7      3.2          return self.tracks[idx_track]

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: __repr__ at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                               def __repr__(self):
    63                                                   return str([str(t) for t in self.tracks])

Total time: 0.00425504 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/gcode/__init__.py
Function: gcode_to_path at line 65

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    65                                           def gcode_to_path(gcodeFile,default_power=100.0):
    66         1     348863.0 348863.0      8.2      class Index(IntEnum):
    67                                                   X = 0
    68                                                   Y = 1
    69                                                   Z = 2
    70                                           
    71         1     537895.0 537895.0     12.6      gf = open( gcodeFile, 'r' )
    72                                           
    73         1        451.0    451.0      0.0      tracks = []
    74         1        180.0    180.0      0.0      track_counter = 0
    75         1        225.0    225.0      0.0      firstPositionRead = False
    76         1       5216.0   5216.0      0.1      previousPosition = np.zeros(3)
    77         1        467.0    467.0      0.0      previousTime = 0.0
    78         1        277.0    277.0      0.0      previousNonZeroSpeed = 10
    79                                           
    80        42     152462.0   3630.0      3.6      for rawline in gf:
    81        41      11710.0    285.6      0.3          timePassed = False
    82        41      44430.0   1083.7      1.0          trackType = TrackType.COOLING
    83        41      74590.0   1819.3      1.8          currentPosition = previousPosition.copy()
    84        41      12046.0    293.8      0.3          currentTime = previousTime
    85        41      12477.0    304.3      0.3          currentPower = 0.0
    86        41      12057.0    294.1      0.3          currentSpeed = previousNonZeroSpeed
    87        41      11496.0    280.4      0.3          hasMotion=False
    88        41      41807.0   1019.7      1.0          line = rawline.rstrip("\n")
    89        41      69256.0   1689.2      1.6          line = line.split(";", 1)[0]# remove comments
    90                                           
    91        41      39020.0    951.7      0.9          instructions = line.split()
    92       163      91476.0    561.2      2.1          for instruction in instructions:
    93       122      50494.0    413.9      1.2              instructionType = instruction[0]
    94       122     176840.0   1449.5      4.2              instructionValue = float(instruction.lstrip(instructionType))
    95       122      73499.0    602.5      1.7              if instructionType == "G":
    96        41      22563.0    550.3      0.5                  if instructionValue == 4:
    97        20      19062.0    953.1      0.4                      trackType = TrackType.DWELLING
    98        81      32779.0    404.7      0.8              elif instructionType == "F":
    99         1        546.0    546.0      0.0                  currentSpeed = instructionValue
   100         1        232.0    232.0      0.0                  previousNonZeroSpeed = currentSpeed
   101        80      37150.0    464.4      0.9              elif instructionType in ["X", "Y", "Z"]:
   102        40     116257.0   2906.4      2.7                  currentPosition[ int( Index[instructionType] ) ] = instructionValue
   103        40      17468.0    436.7      0.4                  hasMotion=True
   104        40      14742.0    368.6      0.3              elif instructionType == "E":
   105        10       3856.0    385.6      0.1                  if instructionValue > 0.0:
   106        10       2842.0    284.2      0.1                      currentPower = default_power
   107        10       9113.0    911.3      0.2                      trackType = TrackType.PRINTING
   108        30      11314.0    377.1      0.3              elif instructionType == "P":
   109        20      22754.0   1137.7      0.5                  if trackType in [TrackType.DWELLING, TrackType.RECOATING]:
   110        20      17653.0    882.6      0.4                      currentTime += instructionValue
   111        20       8272.0    413.6      0.2                      timePassed=True
   112        10       3884.0    388.4      0.1              elif instructionType == "R":
   113        10      10510.0   1051.0      0.2                  if (trackType == TrackType.DWELLING) and (instructionValue > 0):
   114        10       7460.0    746.0      0.2                      trackType = TrackType.RECOATING
   115        41      42788.0   1043.6      1.0          if trackType in [TrackType.DWELLING or TrackType.RECOATING]:
   116        10       3137.0    313.7      0.1              currentSpeed = 0.0
   117                                           
   118        41      12741.0    310.8      0.3          if (hasMotion):
   119        20       4790.0    239.5      0.1              if (firstPositionRead):
   120        19     428513.0  22553.3     10.1                  currentTime = previousTime + np.linalg.norm(currentPosition - previousPosition) / currentSpeed
   121        19      10649.0    560.5      0.3                  timePassed = True
   122                                                       else:
   123         1        219.0    219.0      0.0                  firstPositionRead = True
   124         1       1857.0   1857.0      0.0                  previousPosition = currentPosition.copy()
   125                                           
   126        41      13138.0    320.4      0.3          if timePassed:
   127        78    1200335.0  15388.9     28.2              tracks.append(Track(previousPosition,currentPosition,
   128        39       9753.0    250.1      0.2                            previousTime,currentTime,
   129        39      10610.0    272.1      0.2                            trackType,currentSpeed,currentPower,
   130        39       8473.0    217.3      0.2                            index=track_counter))
   131        39      86784.0   2225.2      2.0              previousPosition=currentPosition.copy()
   132        39      11877.0    304.5      0.3              previousTime=currentTime
   133        39      29489.0    756.1      0.7              track_counter+=1
   134                                           
   135         1     168267.0 168267.0      4.0      gf.close()
   136         1      85929.0  85929.0      2.0      return Path(tracks)

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: mark_cells at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                           def mark_cells(msh, cell_index):
     9                                               num_cells = msh.topology.index_map(
    10                                                   msh.topology.dim).size_local + msh.topology.index_map(
    11                                                   msh.topology.dim).num_ghosts
    12                                               cells = np.arange(0, num_cells, dtype=np.int32)
    13                                               values = np.full(cells.shape, 0, dtype=np.int32)
    14                                               values[cell_index] = np.full(len(cell_index), 1, dtype=np.int32)
    15                                               cell_tag = mesh.meshtags(msh, msh.topology.dim, cells, values)
    16                                               return cell_tag

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: indices_to_func at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                           def indices_to_func(mt,space,name="collision"):
    18                                               domain = space.mesh
    19                                               dofs = fem.locate_dofs_topological(space, domain.topology.dim, mt.find(1))
    20                                               f = fem.Function(space,name=name)
    21                                               f.x.array[dofs] = 1
    22                                               return f

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: create_partition_tag at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                           def create_partition_tag(domain: mesh.Mesh) -> mesh.MeshTags:
    24                                               """
    25                                               Create a cell marker with all cells owned by the process tagged with the process rank
    26                                               """
    27                                               tdim = domain.topology.dim
    28                                               num_cells_local = domain.topology.index_map(tdim).size_local
    29                                               cells = np.arange(num_cells_local, dtype=np.int32)
    30                                               values = np.full(num_cells_local, domain.comm.rank, dtype=np.int32)
    31                                               return mesh.meshtags(domain, tdim, cells, values)

Total time: 0.00864528 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: extract_cell_geometry at line 32

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           def extract_cell_geometry(input_mesh, cell: int):
    33       768    3396730.0   4422.8     39.3      mesh_nodes = cpp.mesh.entities_to_geometry(
    34       512    1465852.0   2863.0     17.0          input_mesh._cpp_object, input_mesh.topology.dim, np.array([cell], dtype=np.int32), False)[0]
    35                                           
    36       256    3782698.0  14776.2     43.8      return input_mesh.geometry.x[mesh_nodes]

Total time: 4.42503 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: mesh_collision at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                           def mesh_collision(mesh_big,mesh_small):
    40                                               '''
    41                                               mesh_small is in MPI.COMM_SELF
    42                                               mesh_big is in MPI.COMM_WORLD
    43                                               '''
    44        32     157361.0   4917.5      0.0      num_big_cells = mesh_big.topology.index_map(mesh_big.topology.dim).size_local + \
    45        16      45330.0   2833.1      0.0          mesh_big.topology.index_map(mesh_big.topology.dim).num_ghosts
    46                                           
    47        32 4401009999.0    1e+08     99.5      bb_tree = geometry.bb_tree(
    48        16    3918021.0 244876.3      0.1          mesh_big, mesh_big.topology.dim, np.arange(num_big_cells, dtype=np.int32))
    49                                           
    50                                               # For each local mesh, compute the bounding box, compute colliding cells
    51        16      23607.0   1475.4      0.0      tol = 1e-13
    52        16      14120.0    882.5      0.0      big_cells = []
    53        16      49839.0   3114.9      0.0      local_cells_set = set()
    54        16     738804.0  46175.2      0.0      o_cell_idx = mesh_small.topology.original_cell_index
    55        32    1918188.0  59943.4      0.0      bb_small = geometry.bb_tree(
    56        16      33304.0   2081.5      0.0          mesh_small, mesh_small.topology.dim)
    57        32     374031.0  11688.5      0.0      cell_cell_collisions = geometry.compute_collisions_trees(
    58        16       3830.0    239.4      0.0          bb_small, bb_tree)
    59       144     806436.0   5600.2      0.0      for local_cell, big_cell in cell_cell_collisions:
    60                                           
    61       128    5761638.0  45012.8      0.1          geom_small = extract_cell_geometry(mesh_small, local_cell)
    62       128    4602001.0  35953.1      0.1          geom_big = extract_cell_geometry(mesh_big, big_cell)
    63       128    1713830.0  13389.3      0.0          distance = geometry.compute_distance_gjk(geom_big, geom_small)
    64       128    2316087.0  18094.4      0.1          if np.linalg.norm(distance) <= tol:
    65       128     125478.0    980.3      0.0              big_cells.append(big_cell)
    66       128     427662.0   3341.1      0.0              local_cells_set = local_cells_set.union([o_cell_idx[local_cell]])
    67                                           
    68        16     979695.0  61230.9      0.0      sorted_unique_big_cells = np.unique(big_cells).astype(dtype=np.int32)
    69        16       6346.0    396.6      0.0      return sorted_unique_big_cells

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: __init__ at line 72

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    72                                               def __init__(self,x0,x1,width,height,depth):
    73                                                   self.x0 = x0
    74                                                   self.x1 = x1
    75                                                   self.width = width
    76                                                   self.height = height
    77                                                   self.depth = depth

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: get_mesh at line 79

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    79                                               def get_mesh(self):
    80                                                   '''
    81                                                   Return an oriented hexahedron/rectangle from hatch geometry
    82                                                   '''
    83                                                   pass

Total time: 0.00579383 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: __init__ at line 86

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    86                                               def __init__(self,p0:np.ndarray,p1:np.ndarray,
    87                                                            width=1.0,height=1.0,depth=1.0,dim=3,shrink=True):
    88                                                   '''
    89                                                   Note: For both dim 2 and 3, vectors have 3 components
    90                                                   i.e. 2D is nested in 3D
    91                                                   '''
    92        16      30405.0   1900.3      0.5          self.dim = dim
    93        16      50363.0   3147.7      0.9          step = p1-p0
    94        16     297116.0  18569.8      5.1          step_len = np.linalg.norm(step)
    95        16     234067.0  14629.2      4.0          self.pos = (p0+p1)/2
    96        16     107939.0   6746.2      1.9          self.x_axis = step / step_len
    97        16    4589678.0 286854.9     79.2          self.set_transverse_axes(dim)
    98        16     212857.0  13303.6      3.7          self.pos += ((height-depth)/2)*self.z_axis
    99        32     116906.0   3653.3      2.0          self.half_widths = np.array([step_len/2.0,
   100        16       8918.0    557.4      0.2                                       width/2.0,
   101        16      13114.0    819.6      0.2                                       (height+depth)/2.0,])
   102        16      11339.0    708.7      0.2          if shrink:
   103        16     121132.0   7570.8      2.1              self.half_widths *= 0.999

Total time: 0.00434168 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: set_transverse_axes at line 105

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   105                                               def set_transverse_axes(self,dim):
   106                                                   '''
   107                                                   Set y and z axes depending on dimension
   108                                                   '''
   109        16      40438.0   2527.4      0.9          if (dim==2):
   110                                                       self.z_axis = np.array([0.0,1.0,0.0])
   111                                                   else:
   112        16     115185.0   7199.1      2.7              self.z_axis = np.array([0.0,0.0,1.0])
   113        16     289194.0  18074.6      6.7          self.z_axis -= self.z_axis.dot(self.x_axis)*self.x_axis
   114        16     385454.0  24090.9      8.9          self.z_axis /= np.linalg.norm(self.z_axis)
   115        16     242549.0  15159.3      5.6          assert np.linalg.norm(self.z_axis)>0, "Steps along z-axis are not allowed."
   116        16    3268858.0 204303.6     75.3          self.y_axis = np.cross(self.z_axis,self.x_axis)

Total time: 0.0567013 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/geometry/__init__.py
Function: get_dolfinx_mesh at line 118

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   118                                               def get_dolfinx_mesh(self):
   119        16      91711.0   5731.9      0.2          points = np.empty((2**self.dim,self.dim))
   120        16       8302.0    518.9      0.0          point_counter = 0
   121        16       9443.0    590.2      0.0          if self.dim==3:
   122        48      24169.0    503.5      0.0              for y_sign in [-1.0,+1.0]:
   123        96      42570.0    443.4      0.1                  for x_sign in [-1.0,+1.0]:
   124       192      94010.0    489.6      0.2                      for z_sign in [-1.0,+1.0]:
   125       128     518903.0   4053.9      0.9                          points[point_counter,:] = \
   126       512    1129041.0   2205.2      2.0                                  self.pos +  \
   127       128     984149.0   7688.7      1.7                                  x_sign*self.half_widths[0]*self.x_axis + \
   128       128     795999.0   6218.7      1.4                                  y_sign*self.half_widths[1]*self.y_axis + \
   129       128     888767.0   6943.5      1.6                                  z_sign*self.half_widths[2]*self.z_axis
   130       128      94709.0    739.9      0.2                          point_counter+=1
   131        16      14450.0    903.1      0.0              cells = [(0,1,2,3,4,5,6,7)]
   132        16   39950681.0    2e+06     70.5              ufl_mesh = ufl.Mesh(basix.ufl.element("Lagrange", "hexahedron", 1, shape=(self.dim,), dtype=PETSc.RealType))
   133                                                   else:
   134                                                       for x_sign in [-1.0,+1.0]:
   135                                                           for z_sign in [-1.0,+1.0]:
   136                                                               points[point_counter,:] = \
   137                                                                       self.pos[:2] +  \
   138                                                                       x_sign*self.half_widths[0]*self.x_axis[:2] + \
   139                                                                       z_sign*self.half_widths[2]*self.z_axis[:2]
   140                                                               point_counter+=1
   141                                                       cells = [(0,1,2,3)]
   142                                                       ufl_mesh = ufl.Mesh(basix.ufl.element("Lagrange", "quadrilateral", 1, shape=(self.dim,), dtype=PETSc.RealType))
   143        16   12054350.0 753396.9     21.3          return mesh.create_mesh(MPI.COMM_SELF,cells,points,ufl_mesh)

Total time: 25.3849 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: __init__ at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                               def __init__(self, domain, parameters, name="case"):
    25         1       2852.0   2852.0      0.0          self.domain   = domain
    26         1       8886.0   8886.0      0.0          self.dim = self.domain.topology.dim
    27         1        580.0    580.0      0.0          self.name = name
    28         1   64317409.0    6e+07      0.3          self.v_bg    = fem.functionspace(domain, ("Lagrange", 1),)
    29         1    2742704.0    3e+06      0.0          self.v       = self.v_bg.clone()
    30         1   27545697.0    3e+07      0.1          self.dg0_bg  = fem.functionspace(domain, ("Discontinuous Lagrange", 0),)
    31         2   27821359.0    1e+07      0.1          self.dg0_vec = fem.functionspace(self.domain,
    32         2     332588.0 166294.0      0.0                                           basix.ufl.element("DG",
    33         1      13144.0  13144.0      0.0                                                             self.domain.basix_cell(),
    34         1        202.0    202.0      0.0                                                             0,
    35         1        400.0    400.0      0.0                                                             shape=(self.dim,)))
    36         1        842.0    842.0      0.0          self.restriction = None
    37                                           
    38                                                   # Set num cells per processor
    39         1  222702800.0    2e+08      0.9          self.domain.topology.create_entities(self.dim-1)
    40         1      20912.0  20912.0      0.0          self.cell_map = self.domain.topology.index_map(self.dim)
    41         1       3074.0   3074.0      0.0          self.facet_map = self.domain.topology.index_map(self.dim-1)
    42         1       5938.0   5938.0      0.0          self.num_cells = self.cell_map.size_local + self.cell_map.num_ghosts
    43         1       1524.0   1524.0      0.0          self.num_facets = self.facet_map.size_local + self.facet_map.num_ghosts
    44         1  261087594.0    3e+08      1.0          self.bb_tree = geometry.bb_tree(self.domain,self.dim,padding=1e-7)
    45         1        2e+10    2e+10     96.7          self.set_activation()
    46                                           
    47         1     507344.0 507344.0      0.0          self.u   = fem.Function(self.v, name="uh")   # Solution
    48         1     421608.0 421608.0      0.0          self.u_prev = fem.Function(self.v, name="uh_n") # Previous solution
    49         1    1106812.0    1e+06      0.0          self.grad_u = fem.Function(self.dg0_vec,name="grad")
    50         1        948.0    948.0      0.0          self.is_grad_computed = False
    51         1       4015.0   4015.0      0.0          self.dirichlet_bcs = []
    52                                           
    53                                                   # BCs / Interface
    54         1        704.0    704.0      0.0          self.gammaNodes = None
    55         1        636.0    636.0      0.0          self.neumann_flux = None
    56         1     397160.0 397160.0      0.0          self.dirichlet_gamma = fem.Function(self.v,name="dirichlet_gamma")
    57         1        502.0    502.0      0.0          self.is_dirichlet_gamma = False
    58                                           
    59                                                   # Source term
    60         1        784.0    784.0      0.0          if self.dim == 2:
    61                                                       self.source = Gaussian2D(parameters)
    62                                                   else:
    63         1    5388387.0    5e+06      0.0              self.source = Gaussian3D(parameters)
    64         1     468534.0 468534.0      0.0          self.source_rhs   = fem.Function(self.v, name="source")   # Solution
    65                                           
    66                                                   # Time
    67         1       1359.0   1359.0      0.0          self.isSteady = parameters["isSteady"]
    68         1        852.0    852.0      0.0          self.iter     = 0
    69         1        721.0    721.0      0.0          self.time     = 0.0
    70         1      84261.0  84261.0      0.0          self.dt       = fem.Constant(self.domain, parameters["dt"])
    71                                                   # Material parameters
    72         1    6852914.0    7e+06      0.0          self.define_materials(parameters)
    73                                                   # Integration
    74         2       4922.0   2461.0      0.0          self.quadrature_metadata = {"quadrature_rule":"vertex",
    75         1        183.0    183.0      0.0                                      "quadrature_degree":1, }
    76         1  203353424.0    2e+08      0.8          self.initialize_post()

Total time: 0.0007277 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: __del__ at line 78

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    78                                               def __del__(self):
    79         1     727700.0 727700.0    100.0          self.writer.close()

Total time: 0.000714136 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: set_initial_condition at line 81

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    81                                               def set_initial_condition( self, expression ):
    82         1        462.0    462.0      0.1          try:
    83         1       2339.0   2339.0      0.3              constant = float(expression)
    84         1     312476.0 312476.0     43.8              self.u.x.array[:] = constant
    85                                                   except TypeError:
    86                                                       self.u.interpolate(expression)
    87         1     398859.0 398859.0     55.9          self.u_prev.x.array[:] = self.u.x.array[:]

Total time: 0.00681033 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: define_materials at line 89

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    89                                               def define_materials(self,parameters):
    90         1       1675.0   1675.0      0.0          self.T_env = parameters["environment_temperature"]
    91         1        726.0    726.0      0.0          if "deposition_temperature" in parameters:
    92         1       1158.0   1158.0      0.0              self.T_dep = parameters["deposition_temperature"]
    93         1        487.0    487.0      0.0          if "convection_coeff" in parameters:
    94         2      61042.0  30521.0      0.9              self.convection_coeff = fem.Constant(
    95         1       2052.0   2052.0      0.0                      self.domain, PETSc.ScalarType(parameters["convection_coeff"]))
    96                                                   else:
    97                                                       self.convection_coeff = None
    98                                           
    99         1        731.0    731.0      0.0          self.materials = []
   100        20       8618.0    430.9      0.1          for key in parameters.keys():
   101        19      11230.0    591.1      0.2              if key.startswith("material"):
   102         2      17149.0   8574.5      0.3                  self.materials.append(Material(parameters[key]))
   103         1       1073.0   1073.0      0.0          assert len(self.materials) > 0, "No materials defined!"
   104                                                   # All domain starts out covered by material #0
   105         1     302909.0 302909.0      4.4          self.material_id = fem.Function(self.dg0_bg,name="material_id")
   106         1     148057.0 148057.0      2.2          self.material_id.x.array[:] = 0.0
   107                                                   # Initialize material funcs
   108         1     335451.0 335451.0      4.9          self.k   = fem.Function(self.dg0_bg,name="conductivity")
   109         1     342855.0 342855.0      5.0          self.cp  = fem.Function(self.dg0_bg,name="specific_heat")
   110         1     498770.0 498770.0      7.3          self.rho = fem.Function(self.dg0_bg,name="density")
   111         1    5076346.0    5e+06     74.5          self.set_material_funcs()

Total time: 0.0296659 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: update_material_funcs at line 113

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   113                                               def update_material_funcs(self,cells,new_id):
   114        17    8116036.0 477413.9     27.4          self.material_id.x.array[cells] = new_id
   115        17    7335867.0 431521.6     24.7          self.k.x.array[cells]   = self.materials[new_id].k
   116        17    7182532.0 422501.9     24.2          self.rho.x.array[cells] = self.materials[new_id].rho
   117        17    7031428.0 413613.4     23.7          self.cp.x.array[cells]  = self.materials[new_id].cp

Total time: 0.00502985 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: set_material_funcs at line 119

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   119                                               def set_material_funcs(self):
   120         3       7609.0   2536.3      0.2          for idx, material in enumerate(self.materials):
   121         2    2223737.0    1e+06     44.2              cells = np.flatnonzero(abs(self.material_id.x.array-idx)<1e-7)
   122         2     827020.0 413510.0     16.4              self.k.x.array[cells]   = material.k
   123         2    1024419.0 512209.5     20.4              self.rho.x.array[cells] = material.rho
   124         2     947062.0 473531.0     18.8              self.cp.x.array[cells]  = material.cp

Total time: 3.25288 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: pre_iterate at line 126

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   126                                               def pre_iterate(self):
   127                                                   # Pre-iterate source first, current track is tn's
   128        20   17741330.0 887066.5      0.5          self.source.pre_iterate(self.time,self.dt.value)
   129        20 3223183575.0    2e+08     99.1          self.source_rhs.interpolate(self.source)
   130        20     117040.0   5852.0      0.0          self.iter += 1
   131        20    1301697.0  65084.8      0.0          self.time += self.dt.value
   132        20    8936764.0 446838.2      0.3          self.u_prev.x.array[:] = self.u.x.array[:]
   133        20     150052.0   7502.6      0.0          if rank==0:
   134        20    1448693.0  72434.6      0.0              print(f"Problem {self.name} about to solve for iter {self.iter}, time {self.time}.")

Total time: 5.173e-06 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: post_iterate at line 136

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   136                                               def post_iterate(self):
   137        20       5173.0    258.6    100.0          pass

Total time: 103.368 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: set_activation at line 139

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   139                                               def set_activation(self, active_els=None):
   140                                                   '''
   141                                                   TODO: Refactor so that if arg None, do nothing.
   142                                                   bfacets should be somewhere else possibly
   143                                                   '''
   144         3       5363.0   1787.7      0.0          if active_els is None:
   145         1     179118.0 179118.0      0.0              active_els = np.arange(self.num_cells,dtype=np.int32)
   146         6    1310387.0 218397.8      0.0          self.active_els_tag = mesh.meshtags(self.domain, self.dim,
   147         3     539356.0 179785.3      0.0                                              np.arange(self.num_cells, dtype=np.int32),
   148         3    3464171.0    1e+06      0.0                                              get_mask(self.num_cells, active_els),)
   149         3      35310.0  11770.0      0.0          self.domain.topology.create_connectivity(self.dim,self.dim)
   150         3   29580252.0    1e+07      0.0          self.active_els_func= indices_to_function(self.dg0_bg,active_els,self.dim,name="active_els")
   151         3       1744.0    581.3      0.0          try:
   152         3     507108.0 169036.0      0.0              old_active_dofs  = self.active_dofs.copy()
   153         2  138651203.0    7e+07      0.1              self.active_dofs = fem.locate_dofs_topological(self.v, self.dim, active_els,)
   154         2        3e+10    1e+10     26.7              self.just_activated_nodes = [item for item in self.active_dofs if item not in old_active_dofs]
   155         1        765.0    765.0      0.0          except AttributeError:
   156         1  105917209.0    1e+08      0.1              self.active_dofs = fem.locate_dofs_topological(self.v, self.dim, active_els,)
   157         3  234770996.0    8e+07      0.2          self.active_dofs = fem.locate_dofs_topological(self.v, self.dim, active_els,)
   158                                           
   159         3 1569234313.0    5e+08      1.5          self.restriction = multiphenicsx.fem.DofMapRestriction(self.v.dofmap, self.active_dofs)
   160         6    4679693.0 779948.8      0.0          self.bfacets_tag  = mesh.meshtags(self.domain, self.dim-1,
   161         3   18008238.0    6e+06      0.0                                           np.arange(self.num_facets, dtype=np.int32),
   162         6    8191557.0    1e+06      0.0                                           get_mask(self.num_facets,
   163         3        7e+10    2e+10     71.2                                                    locate_active_boundary( self.domain, self.active_els_func), dtype=np.int32),
   164                                                                                    )

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: compute_gradient at line 166

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   166                                               def compute_gradient(self):
   167                                                   if not(self.is_grad_computed):
   168                                                       self.grad_u.interpolate( fem.Expression(ufl.grad(self.u),self.grad_u.function_space.element.interpolation_points()) )
   169                                                       self.is_grad_computed = True

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: get_active_in_external at line 171

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   171                                               def get_active_in_external(self, p_ext:Problem ):
   172                                                   '''
   173                                                   Return nodal function with nodes active in p_ext
   174                                                   '''
   175                                                   # Get function on p_ext
   176                                                   active_dofs_ext_func_ext = fem.Function( p_ext.v )
   177                                                   active_dofs_ext_func_ext.x.array[p_ext.active_dofs] = 1.0
   178                                                   # Interpolate to nodes of self
   179                                                   nmmid = dolfinx.fem.create_nonmatching_meshes_interpolation_data(
   180                                                                                self.domain,
   181                                                                                self.v.element,
   182                                                                                active_dofs_ext_func_ext.function_space.mesh,
   183                                                                                padding=1e-5,)
   184                                                   active_dofs_ext_func_self = dolfinx.fem.Function(self.v_bg,
   185                                                                                                    name="active_nodes_ext",)
   186                                                   active_dofs_ext_func_self.interpolate(active_dofs_ext_func_ext, nmm_interpolation_data=nmmid)
   187                                                   np.round(active_dofs_ext_func_self.x.array,decimals=7,out=active_dofs_ext_func_self.x.array)
   188                                                   return active_dofs_ext_func_self

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: find_gamma at line 190

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   190                                               def find_gamma(self, p_ext:Problem):
   191                                                   gammaFacets = []
   192                                                   ext_active_dofs_func = self.get_active_in_external( p_ext )
   193                                                   ext_active_dofs_func.name = "ext act dofs"
   194                                                   # Loop over boundary facets, get incident nodes,
   195                                                   # if all nodes of facet are active in external --> gamma facet
   196                                                   self.domain.topology.create_connectivity(self.dim-1, 0)
   197                                                   con_facet_nodes = self.domain.topology.connectivity(self.dim-1, 0)
   198                                                   for ifacet in self.bfacets_tag.find(1):
   199                                                       local_con = con_facet_nodes.links(ifacet)
   200                                                       local_con_global = self.domain.topology.index_map(0).local_to_global(local_con)
   201                                                       local_con_space = self.v_bg.dofmap.index_map.global_to_local(local_con_global)
   202                                                       all_nodes_active = True
   203                                                       for inode in local_con_space:
   204                                                           if not(ext_active_dofs_func.x.array[inode]):
   205                                                               all_nodes_active = False
   206                                                               break
   207                                                       if all_nodes_active:
   208                                                           gammaFacets.append(ifacet)
   209                                                   self.gammaFacets = mesh.meshtags(self.domain, self.dim-1,
   210                                                                                    np.arange(self.num_facets, dtype=np.int32),
   211                                                                                    get_mask(self.num_facets, gammaFacets),)
   212                                                   self.gammaNodes = indices_to_function(self.v,
   213                                                                                    self.gammaFacets.find(1),
   214                                                                                    self.dim-1,
   215                                                                                    name="gammaNodes",)

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: add_dirichlet_bc at line 219

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   219                                               def add_dirichlet_bc(self, func, bdofs=None, bfacets_tag=None, marker=None, reset=False):
   220                                                   if reset:
   221                                                       self.dirichlet_bcs = []
   222                                                   if bdofs is None:
   223                                                       if bfacets_tag is None:
   224                                                           if marker==None:
   225                                                               bfacets_tag = self.bfacets_tag
   226                                                               bdofs = fem.locate_dofs_topological(self.v, self.dim-1, bfacets_tag.find(1),)
   227                                                           else:
   228                                                               bdofs  = fem.locate_dofs_geometrical(self.v,marker)
   229                                                   u_bc = fem.Function(self.v)
   230                                                   u_bc.interpolate(func)
   231                                                   self.dirichlet_bcs.append(fem.dirichletbc(u_bc, bdofs))

Total time: 4.11241 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: get_facet_integrations_entities at line 233

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   233                                               def get_facet_integrations_entities(self, facet_indices=None):
   234         2       3611.0   1805.5      0.0          facets_integration_ents = []
   235         2       2342.0   1171.0      0.0          if facet_indices is None:
   236                                                       facet_indices = self.gammaFacets.find(1)
   237         2      25650.0  12825.0      0.0          f_to_c = self.domain.topology.connectivity(self.dim-1,self.dim)
   238         2       4523.0   2261.5      0.0          c_to_f = self.domain.topology.connectivity(self.dim,self.dim-1)
   239     75746   41495751.0    547.8      1.0          for ifacet in facet_indices:
   240     75744  439166635.0   5798.0     10.7              if ifacet >= self.facet_map.size_local:
   241                                                           continue
   242                                                       # Find cells connected to facet
   243     75744  489365614.0   6460.8     11.9              cells = f_to_c.links(ifacet)
   244                                                       # Get correct cell from activation
   245     75744 1430771910.0  18889.6     34.8              active_cells = cells[np.flatnonzero(self.active_els_tag.values[cells])]
   246                                           
   247     75744   55565417.0    733.6      1.4              assert len(active_cells) == 1
   248                                                       # Get local index of ifacet
   249     75744  501357402.0   6619.1     12.2              local_facets = c_to_f.links(active_cells[0])
   250     75744  967645835.0  12775.2     23.5              local_index = np.flatnonzero(local_facets == ifacet)
   251     75744   48312965.0    637.8      1.2              assert len(local_index) == 1
   252                                           
   253                                                       # Append integration entities
   254     75744   88837626.0   1172.9      2.2              facets_integration_ents.append(active_cells[0])
   255     75744   49856409.0    658.2      1.2              facets_integration_ents.append(local_index[0])
   256         2        490.0    245.0      0.0          return facets_integration_ents

Total time: 0.022889 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: set_forms_domain at line 258

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   258                                               def set_forms_domain(self):
   259         4      65520.0  16380.0      0.3          dx = ufl.Measure("dx", subdomain_data=self.active_els_tag,
   260         2       2097.0   1048.5      0.0                           metadata=self.quadrature_metadata)
   261         2     291503.0 145751.5      1.3          (u, v) = (ufl.TrialFunction(self.v),ufl.TestFunction(self.v))
   262         2   10051471.0    5e+06     43.9          self.a_ufl = self.k*ufl.dot(ufl.grad(u), ufl.grad(v))*dx(1)
   263         2    3383337.0    2e+06     14.8          self.l_ufl = self.source_rhs*v*dx(1)
   264         2       1167.0    583.5      0.0          if not(self.isSteady):
   265         2    4471295.0    2e+06     19.5              self.a_ufl += (self.rho*self.cp/self.dt)*u*v*dx(1)
   266         2    4622578.0    2e+06     20.2              self.l_ufl += (self.rho*self.cp/self.dt)*self.u_prev*v*dx(1)

Total time: 4.59558 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: set_forms_boundary at line 267

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   267                                               def set_forms_boundary(self):
   268                                                   '''
   269                                                   rn must be called after set_forms_domain
   270                                                   since a_ufl and l_ufl not initialized before
   271                                                   '''
   272         2 4586401627.0    2e+09     99.8          boun_integral_entities = self.get_facet_integrations_entities(self.bfacets_tag.find(1))
   273         6     452806.0  75467.7      0.0          ds = ufl.Measure('ds', domain=self.domain, subdomain_data=[
   274         2    6427297.0    3e+06      0.1                           (1,np.asarray(boun_integral_entities, dtype=np.int32))],
   275         2       3112.0   1556.0      0.0                           metadata=self.quadrature_metadata)
   276         2     330149.0 165074.5      0.0          (u, v) = (ufl.TrialFunction(self.v),ufl.TestFunction(self.v))
   277                                                   # CONVECTION
   278         2       2298.0   1149.0      0.0          if self.convection_coeff is not None:
   279         8     966869.0 120858.6      0.0              self.a_ufl += self.convection_coeff * \
   280         4        947.0    236.8      0.0                            u*v* \
   281         2      51929.0  25964.5      0.0                            ds(1)
   282         2     178616.0  89308.0      0.0              T_env   = fem.Constant(self.domain, PETSc.ScalarType(self.T_env))
   283         8     723425.0  90428.1      0.0              self.l_ufl += self.convection_coeff * \
   284         4       1052.0    263.0      0.0                            T_env*v* \
   285         2      37005.0  18502.5      0.0                            ds(1)

Total time: 0.211396 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: compile_forms at line 287

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   287                                               def compile_forms(self):
   288         2   86332197.0    4e+07     40.8          self.a_compiled = fem.form(self.a_ufl)
   289         2  125063553.0    6e+07     59.2          self.l_compiled = fem.form(self.l_ufl)

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: pre_assemble at line 291

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   291                                               def pre_assemble(self):
   292                                                   pass

Total time: 64.4534 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: assemble at line 294

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   294                                               def assemble(self):
   295        40        4e+10    1e+09     69.3          self.A = multiphenicsx.fem.petsc.assemble_matrix(self.a_compiled,
   296        20      15617.0    780.9      0.0                                                      bcs=self.dirichlet_bcs,
   297        20      28862.0   1443.1      0.0                                                      restriction=(self.restriction, self.restriction))
   298        20  231231024.0    1e+07      0.4          self.A.assemble()
   299        40 7965747555.0    2e+08     12.4          self.L = multiphenicsx.fem.petsc.assemble_vector(self.l_compiled,
   300        20      19870.0    993.5      0.0                                                      restriction=self.restriction,)
   301        20 5908226021.0    3e+08      9.2          multiphenicsx.fem.petsc.apply_lifting(self.L, [self.a_compiled], [self.dirichlet_bcs], restriction=self.restriction,)
   302        20    1565387.0  78269.4      0.0          self.L.ghostUpdate(addv=petsc4py.PETSc.InsertMode.ADD, mode=petsc4py.PETSc.ScatterMode.REVERSE)
   303        20 5665299966.0    3e+08      8.8          multiphenicsx.fem.petsc.set_bc(self.L,self.dirichlet_bcs,restriction=self.restriction)

Total time: 7.52138 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: _solveLinearSystem at line 305

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   305                                               def _solveLinearSystem(self):
   306        20   15839684.0 791984.2      0.2          self.x = multiphenicsx.fem.petsc.create_vector(self.l_compiled, restriction=self.restriction)
   307        20      64488.0   3224.4      0.0          ksp = petsc4py.PETSc.KSP()
   308        20     573246.0  28662.3      0.0          ksp.create(self.domain.comm)
   309        20     314089.0  15704.5      0.0          ksp.setOperators(self.A)
   310        20     297741.0  14887.0      0.0          ksp.setType("cg")
   311                                                   #ksp.getPC().setType("lu")
   312                                                   #ksp.getPC().setFactorSolverType("mumps")
   313                                                   #ksp.setFromOptions()
   314        20 7499462523.0    4e+08     99.7          ksp.solve(self.L, self.x)
   315        20     985358.0  49267.9      0.0          self.x.ghostUpdate(addv=petsc4py.PETSc.InsertMode.INSERT, mode=petsc4py.PETSc.ScatterMode.FORWARD)
   316        20    3843920.0 192196.0      0.1          ksp.destroy()

Total time: 5.65676 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: _restrictSolution at line 318

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   318                                               def _restrictSolution(self):
   319        80  306609845.0    4e+06      5.4          with self.u.vector.localForm() as usub_vector_local, \
   320        40 5290494971.0    1e+08     93.5                  multiphenicsx.fem.petsc.VecSubVectorWrapper(self.x, self.v.dofmap, self.restriction) as x_wrapper:
   321        20   58284923.0    3e+06      1.0                      usub_vector_local[:] = x_wrapper
   322        20    1366147.0  68307.4      0.0          self.x.destroy()

Total time: 13.1798 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: solve at line 324

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   324                                               def solve(self):
   325        20 7521937270.0    4e+08     57.1          self._solveLinearSystem()
   326        20 5657833927.0    3e+08     42.9          self._restrictSolution()
   327        20      50625.0   2531.2      0.0          self.is_grad_computed   = False

Total time: 0.203317 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: initialize_post at line 329

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   329                                               def initialize_post(self):
   330         1       1610.0   1610.0      0.0          self.result_folder = "post"
   331         1  200691208.0    2e+08     98.7          shutil.rmtree(self.result_folder,ignore_errors=True)
   332         1     207620.0 207620.0      0.1          self.writer = io.VTKFile(self.domain.comm, f"{self.result_folder}/{self.name}.pvd", "wb")
   333         1    2416113.0    2e+06      1.2          self.writer_vtx = io.VTXWriter(self.domain.comm, f"{self.result_folder}/{self.name}.bp",output=[self.u])

Total time: 46.8281 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: writepos at line 335

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   335                                               def writepos(self,extra_funcs=[]):
   336        40      54580.0   1364.5      0.0          funcs = [self.u,
   337        20      13302.0    665.1      0.0                   self.u_prev,
   338        20      23462.0   1173.1      0.0                   self.active_els_func,
   339        20      17766.0    888.3      0.0                   self.material_id,
   340        20      20923.0   1046.2      0.0                   self.source_rhs,
   341        20      12073.0    603.6      0.0                   self.k]
   342        20      21196.0   1059.8      0.0          if self.gammaNodes is not None:
   343                                                       funcs.append(self.gammaNodes)
   344        20       9390.0    469.5      0.0          if self.is_grad_computed:
   345                                                       funcs.append(self.grad_u)
   346        20      41797.0   2089.8      0.0          if self.is_dirichlet_gamma:
   347                                                       funcs.append(self.dirichlet_gamma)
   348                                           
   349        20       7722.0    386.1      0.0          try:
   350        20   10185340.0 509267.0      0.0              self.domain.topology.create_connectivity(0, self.domain.topology.dim)
   351        20   47761678.0    2e+06      0.1              just_activated_nodes = indices_to_function(self.v,self.just_activated_nodes,0,name="jnodes")
   352        20      72649.0   3632.4      0.0              funcs.append(just_activated_nodes)
   353                                                   except AttributeError:
   354                                                       pass
   355                                           
   356        20  207992305.0    1e+07      0.4          bnodes = indices_to_function(self.v,self.bfacets_tag.find(1),self.dim-1,name="bnodes")
   357        20      60384.0   3019.2      0.0          funcs.append(bnodes)
   358                                           
   359        20      33712.0   1685.6      0.0          funcs.extend(extra_funcs)
   360        20        5e+10    2e+09     99.4          self.writer.write_function(funcs,t=np.round(self.time,7))

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: writepos_vtx at line 361

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   361                                               def writepos_vtx(self):
   362                                                   self.writer_vtx.write(self.time)

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: clear_dirchlet_bcs at line 364

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   364                                               def clear_dirchlet_bcs(self):
   365                                                   self.dirichlet_bcs = []
   366                                                   self.is_dirichlet_gamma = False

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: write_bmesh at line 368

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   368                                               def write_bmesh(self):
   369                                                   bmesh = dolfinx.mesh.create_submesh(self.domain,self.dim-1,self.bfacets_tag.find(1))[0]
   370                                                   with io.VTKFile(bmesh.comm, f"out/bmesh_{self.name}.pvd", "w") as ofile:
   371                                                       ofile.write_mesh(bmesh)

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/__init__.py
Function: l2_norm_gamma at line 373

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   373                                               def l2_norm_gamma( self, f : dolfinx.fem.Function ):
   374                                                   gamma_ents = self.get_facet_integrations_entities()
   375                                                   ds_neumann = ufl.Measure('ds', domain=self.domain, subdomain_data=[
   376                                                       (8,np.asarray(gamma_ents, dtype=np.int32))])
   377                                                   l_ufl = f*f*ds_neumann(8)
   378                                                   l2_norm = dolfinx.fem.assemble_scalar(fem.form(l_ufl))
   379                                                   l2_norm = comm.allreduce(l2_norm, op=MPI.SUM)
   380                                                   return l2_norm

Total time: 0.00537567 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/heatsource.py
Function: __init__ at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                               def __init__(self,params:dict):
    11         1      11169.0  11169.0      0.2          self.x      = np.array(params["heat_source"]["initial_position"],dtype=np.float64)
    12         1       9101.0   9101.0      0.2          self.x_prev = self.x.copy()
    13         1       1494.0   1494.0      0.0          self.R = params["heat_source"]["radius"]
    14         1        847.0    847.0      0.0          self.power = params["heat_source"]["power"]
    15         1       3534.0   3534.0      0.1          self.speed = np.array(params["heat_source"]["initial_speed"],dtype=np.float64)
    16         1       1159.0   1159.0      0.0          self.path  = None
    17         1        939.0    939.0      0.0          if "path" in params:
    18         1    5347423.0    5e+06     99.5              self.path = gcode_to_path(params["path"],default_power=self.power)

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/heatsource.py
Function: __call__ at line 20

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                               @abstractmethod
    21                                               def __call__(self,x):
    22                                                   pass

Total time: 0.0172254 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/heatsource.py
Function: pre_iterate at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                               def pre_iterate(self,tn,dt):
    24        20     141451.0   7072.6      0.8          self.x_prev[:] = self.x[:]
    25        20      17636.0    881.8      0.1          if self.path is None:
    26                                                       self.x += self.speed*dt
    27                                                   else:
    28        20     219640.0  10982.0      1.3              tnp1 = tn + dt
    29        20     603757.0  30187.8      3.5              self.path.update(tn)
    30        20     534104.0  26705.2      3.1              self.x     = self.path.current_track.get_position(tnp1)
    31        20    2771351.0 138567.5     16.1              self.speed = self.path.current_track.get_speed()
    32        20      46698.0   2334.9      0.3              self.power = self.path.current_track.power
    33        20      15330.0    766.5      0.1              if rank==0:
    34        20   12816325.0 640816.2     74.4                  print(f"Current track is {self.path.current_track}.")
    35        20      21904.0   1095.2      0.1                  if self.path.is_new_track:
    36         3      37154.0  12384.7      0.2                      print("Track has just started.")

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/heatsource.py
Function: __call__ at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                               def __call__(self,x):
    40                                                   r2 = (x[0] - self.x[0])**2 + (x[1] - self.x[1])**2
    41                                                   return 2 * self.power / np.pi / self.R**2 * \
    42                                                       np.exp(-2*(r2)/self.R**2 )

Total time: 1.54446 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/heatsource.py
Function: __call__ at line 45

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                               def __call__(self,x):
    46        20  555063010.0    3e+07     35.9          r2 = (x[0] - self.x[0])**2 + (x[1] - self.x[1])**2 + (x[2] - self.x[2])**2
    47        40   54294015.0    1e+06      3.5          return 6*np.sqrt(3)*(self.power) / np.power(np.pi, 1.5) / np.power(self.R, 3) * \
    48        20  935099568.0    5e+07     60.5              np.exp(-3*(r2)/self.R**2 )

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/helpers.py
Function: interpolate at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                           def interpolate(func2project,
    18                                                           targetSpace,
    19                                                           interpolate,):
    20                                               nmmid = dolfinx.fem.create_nonmatching_meshes_interpolation_data(
    21                                                                            targetSpace.mesh,
    22                                                                            targetSpace.element,
    23                                                                            func2project.ufl_function_space().mesh,
    24                                                                            padding=1e-6,)
    25                                               interpolate.interpolate(func2project, nmm_interpolation_data=nmmid)
    26                                               return interpolate

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/helpers.py
Function: l2_squared at line 28

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    28                                           def l2_squared(f : dolfinx.fem.Function,active_els_tag):
    29                                               dx = ufl.Measure("dx")(subdomain_data=active_els_tag)
    30                                               l_ufl = f*f*dx(1)
    31                                               l2_norm = dolfinx.fem.assemble_scalar(fem.form(l_ufl))
    32                                               l2_norm = comm.allreduce(l2_norm, op=MPI.SUM)
    33                                               return l2_norm

Total time: 59.5204 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/helpers.py
Function: locate_active_boundary at line 35

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    35                                           def locate_active_boundary(domain, active_els_func):
    36         3       4603.0   1534.3      0.0      bfacets = []
    37         3   10500048.0    4e+06      0.0      domain.topology.create_connectivity(domain.topology.dim-1, domain.topology.dim)
    38         3      50321.0  16773.7      0.0      con_facet_cell = domain.topology.connectivity(domain.topology.dim-1, domain.topology.dim)
    39         3      11500.0   3833.3      0.0      num_facets_local = domain.topology.index_map(domain.topology.dim-1).size_local
    40   2715267  858252670.0    316.1      1.4      for ifacet in range(con_facet_cell.num_nodes):
    41   2715264        1e+10   4556.1     20.8          local_con = con_facet_cell.links(ifacet)
    42   2715264  741856552.0    273.2      1.2          incident_active_els = 0
    43   8006184 8883020395.0   1109.5     14.9          for el in local_con:
    44   5290920        3e+10   6373.9     56.7              if abs(active_els_func.x.array[el]-1)<1e-7:
    45   3834000 1719490388.0    448.5      2.9                  incident_active_els += 1
    46   2715264 1127724979.0    415.3      1.9          if (incident_active_els==1) and (ifacet < num_facets_local):
    47    122280   84902264.0    694.3      0.1              bfacets.append(ifacet)
    48         3        704.0    234.7      0.0      return bfacets

Total time: 0.0106683 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/helpers.py
Function: get_mask at line 50

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    50                                           def get_mask(size, indices, dtype=np.int32, true_val=1):
    51         6      47525.0   7920.8      0.4      true_val = dtype(true_val)
    52         6    1447685.0 241280.8     13.6      mask = np.zeros(size, dtype=dtype)
    53         6    9151501.0    2e+06     85.8      mask[indices] = true_val
    54         6      21617.0   3602.8      0.2      return mask

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/helpers.py
Function: interpolate_dg_at_facets at line 56

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    56                                           def interpolate_dg_at_facets(f,facets,targetSpace,bb_tree_ext,
    57                                                                        activation_tag,
    58                                                                        ext_activation_tag,
    59                                                                        name="flux"):
    60                                               interpolated_f = fem.Function(targetSpace,name=name)
    61                                               domain           = targetSpace.mesh
    62                                               ext_domain       = f.function_space.mesh
    63                                               cdim = domain.topology.dim
    64                                               # Build Gamma midpoints array
    65                                               local_interface_midpoints = np.zeros((len(facets), 3), np.double)
    66                                               for i, ifacet in enumerate(facets):
    67                                                   local_interface_midpoints[i,:] = mesh.compute_midpoints(domain,cdim-1,np.array([ifacet],dtype=np.int32))
    68                                           
    69                                               facet_counts  = np.zeros(comm.size, dtype=np.int32)
    70                                               facets_offsets = np.zeros(comm.size, dtype=np.int32)
    71                                               comm.Allgather(np.array([len(facets)], np.int32), facet_counts)
    72                                               facets_offsets[1:] = np.cumsum(facet_counts[:-1])
    73                                               total_facet_count = np.sum(facet_counts, dtype=int)
    74                                           
    75                                               global_interface_midpoints = np.zeros((total_facet_count,3), dtype=np.double, order='C')
    76                                               comm.Allgatherv(local_interface_midpoints,[global_interface_midpoints,facet_counts*local_interface_midpoints.shape[1],facets_offsets*local_interface_midpoints.shape[1],MPI.DOUBLE])
    77                                           
    78                                               # Collect values at midpoints
    79                                               local_vals  = np.zeros((total_facet_count,cdim),dtype=np.double,order='C')
    80                                               global_vals = np.zeros((total_facet_count,cdim),dtype=np.double,order='C')
    81                                               found_local  = np.zeros(total_facet_count,dtype=np.double,order='C')
    82                                               found_global = np.zeros(total_facet_count,dtype=np.double,order='C')
    83                                               for idx in range(total_facet_count):
    84                                                   candidate_parents_ext = geometry.compute_collisions_points(bb_tree_ext,global_interface_midpoints[idx,:])
    85                                                   potential_parent_els_ext = geometry.compute_colliding_cells(ext_domain, candidate_parents_ext, global_interface_midpoints[idx,:])
    86                                                   potential_parent_els_ext = potential_parent_els_ext.array[np.flatnonzero( ext_activation_tag.values[ potential_parent_els_ext.array] ) ]
    87                                                   if len(potential_parent_els_ext)>0:
    88                                                       idx_owner_el = potential_parent_els_ext[0]
    89                                                       if idx_owner_el < ext_domain.topology.index_map(cdim).size_local:
    90                                                           local_vals[idx,:]  = f.eval(global_interface_midpoints[idx,:], idx_owner_el)
    91                                                           found_local[idx] = 1
    92                                               comm.Allreduce([local_vals, MPI.DOUBLE], [global_vals, MPI.DOUBLE])
    93                                               comm.Allreduce([found_local, MPI.DOUBLE], [found_global, MPI.DOUBLE])
    94                                           
    95                                               f_to_c_left = domain.topology.connectivity(1,2)
    96                                           
    97                                               # build global parent el array for facets
    98                                               global_parent_els_proc = np.zeros(len(facets), np.int32)
    99                                               for idx, ifacet in enumerate(facets):
   100                                                   parent_els  = f_to_c_left.links(ifacet)
   101                                                   parent_els  = parent_els[np.flatnonzero(activation_tag.values[parent_els])]
   102                                                   assert (len(parent_els)) == 1
   103                                                   parent_el_glob  = domain.topology.index_map(domain.geometry.dim).local_to_global(parent_els)
   104                                                   global_parent_els_proc[idx] = parent_el_glob[0]
   105                                           
   106                                               global_parent_els = np.zeros(total_facet_count, np.int32)
   107                                               comm.Allgatherv(global_parent_els_proc,[global_parent_els,facet_counts,facets_offsets,MPI.INT])
   108                                               local_parent_els  = domain.topology.index_map(domain.geometry.dim).global_to_local(global_parent_els)
   109                                               for idx, el in enumerate(local_parent_els):
   110                                                   if el < 0:
   111                                                       continue
   112                                                   flat_idx    = el*interpolated_f.ufl_shape[0]
   113                                                   interpolated_f.x.array[flat_idx:flat_idx+2] = global_vals[idx]
   114                                           
   115                                               interpolated_f.vector.ghostUpdate(addv=petsc4py.PETSc.InsertMode.INSERT, mode=petsc4py.PETSc.ScatterMode.FORWARD)
   116                                               return interpolated_f

Total time: 0 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/helpers.py
Function: inidices_to_nodal_meshtag at line 118

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   118                                           def inidices_to_nodal_meshtag(space, indices, dim):
   119                                               nodal_dofs = fem.locate_dofs_topological(space, dim, indices,)
   120                                               return mesh.meshtags(space.mesh, space.mesh.topology.dim,
   121                                                                    nodal_dofs,
   122                                                                    np.ones(len(nodal_dofs),
   123                                                                            dtype=np.int32),)

Total time: 0.246938 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/helpers.py
Function: indices_to_function at line 125

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   125                                           def indices_to_function(space, indices, dim, name="f"):
   126        43  217221457.0    5e+06     88.0      dofs = fem.locate_dofs_topological(space, dim, indices,)
   127        43   17449629.0 405805.3      7.1      f = fem.Function(space,name=name)
   128        43   12234320.0 284519.1      5.0      f.x.array[dofs] = 1
   129        43      33038.0    768.3      0.0      return f

Total time: 8.35e-06 s
File: /root/shared/cases/3d_lpbf/mhs_fenicsx/problem/material.py
Function: __init__ at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def __init__(self,params):
     5         2       3939.0   1969.5     47.2          self.k   = default_scalar_type(params["conductivity"])
     6         2       1832.0    916.0     21.9          self.rho = default_scalar_type(params["density"])
     7         2       2579.0   1289.5     30.9          self.cp  = default_scalar_type(params["specific_heat"])

Total time: 0 s
File: /usr/lib/python3.10/abc.py
Function: abstractmethod at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           def abstractmethod(funcobj):
     8                                               """A decorator indicating abstract methods.
     9                                           
    10                                               Requires that the metaclass is ABCMeta or derived from it.  A
    11                                               class that has a metaclass derived from ABCMeta cannot be
    12                                               instantiated unless all of its abstract methods are overridden.
    13                                               The abstract methods can be called using any of the normal
    14                                               'super' call mechanisms.  abstractmethod() may be used to declare
    15                                               abstract methods for properties and descriptors.
    16                                           
    17                                               Usage:
    18                                           
    19                                                   class C(metaclass=ABCMeta):
    20                                                       @abstractmethod
    21                                                       def my_abstract_method(self, ...):
    22                                                           ...
    23                                               """
    24                                               funcobj.__isabstractmethod__ = True
    25                                               return funcobj

